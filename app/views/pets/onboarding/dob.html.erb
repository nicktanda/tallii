<style>
  /* Slider Track with Text */
  .slider-container {
    position: absolute; /* Change position to absolute */
    bottom: 20px; /* Position from the bottom of the viewport */
    left: 50%; /* Center horizontally */
    transform: translateX(-50%); /* Centering correction */
    width: 100%; /* Full width */
    max-width: 500px; /* Max width */
  }

  /* Hide default appearance of the slider */
  .slider {
    -webkit-appearance: none;
    appearance: none;
    width: 100%;
    height: 10px;
    background: transparent; /* Make native track transparent */
    outline: none;
    position: relative;
  }

  /* Text Background for the slider track */
  .slider::before {
    content: "(Half way there) - - - >";
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    font-size: 0.75rem;
    color: #666;
    pointer-events: none;
    width: 100%;
    text-align: right;
    line-height: 10px;
    z-index: -1; /* Ensures it appears below the slider thumb */
  }

  /* Slider thumb with an image */
  .slider::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 48px;
    height: 48px;
    background: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 42 42" fill="none"><g clip-path="url(%23clip0_111_816)"><path d="M20.9999 42C9.47505 42 0.098877 32.6238 0.098877 21.0989C0.098877 9.57393 9.47505 0.197754 20.9999 0.197754C32.5248 0.197754 41.901 9.57393 41.901 21.0989C41.901 32.6238 32.5248 42 20.9999 42Z" fill="%232ABA52"/><path d="M31.5672 21.0169C31.5672 26.4142 33.2408 31.4198 36.0953 35.5463C39.693 31.7902 41.9066 26.6984 41.9066 21.099C41.9066 15.4654 39.6653 10.3461 36.0288 6.5835C33.2146 10.6915 31.5672 15.6615 31.5672 21.0169ZM0.0927734 21.099C0.0927734 26.6984 2.30639 31.7902 5.90403 35.5463C8.75856 31.4198 10.4322 26.4142 10.4322 21.0169C10.4322 15.6615 8.78464 10.6914 5.97056 6.5835C2.33403 10.3461 0.0927734 15.4654 0.0927734 21.099Z" fill="%23B4D99A"/><path d="M33.4894 21.0987C33.4894 16.4134 34.8442 11.9369 37.3664 8.11434C36.5479 7.08453 35.6348 6.13358 34.6391 5.27393C33.511 6.87416 32.5578 8.59074 31.7958 10.3942C30.3613 13.7857 29.634 17.3872 29.634 21.0987C29.634 24.8102 30.3612 28.4117 31.7958 31.8032C32.5579 33.6067 33.5111 35.3234 34.6391 36.9236C35.6348 36.064 36.5479 35.113 37.3665 34.0832C34.8442 30.2606 33.4894 25.784 33.4894 21.0987ZM4.63363 8.11434C7.15584 11.9369 8.51059 16.4135 8.51059 21.0987C8.51059 25.784 7.15576 30.2606 4.63354 34.0832C5.45204 35.113 6.36512 36.064 7.36084 36.9236C8.48889 35.3234 9.44213 33.6067 10.2042 31.8032C11.6387 28.4117 12.3661 24.8102 12.3661 21.0987C12.3661 17.3872 11.6387 13.7857 10.2042 10.3942C9.44217 8.59075 8.48896 6.87417 7.36092 5.27393C6.3652 6.13358 5.45213 7.08453 4.63363 8.11434Z" fill="%23E5E4DF"/></g><defs><clipPath id="clip0_111_816"><rect width="42" height="42" fill="white"/></clipPath></defs></svg>') no-repeat center center;
    background-size: contain;
    cursor: pointer;
  }

  .slider::-moz-range-thumb {
    width: 48px;
    height: 48px;
    background: url('data:image/svg+xml;charset=UTF-8,<svg xmlns="http://www.w3.org/2000/svg" width="21" height="21" viewBox="0 0 42 42" fill="none"><g clip-path="url(%23clip0_111_816)"><path d="M20.9999 42C9.47505 42 0.098877 32.6238 0.098877 21.0989C0.098877 9.57393 9.47505 0.197754 20.9999 0.197754C32.5248 0.197754 41.901 9.57393 41.901 21.0989C41.901 32.6238 32.5248 42 20.9999 42Z" fill="%232ABA52"/><path d="M31.5672 21.0169C31.5672 26.4142 33.2408 31.4198 36.0953 35.5463C39.693 31.7902 41.9066 26.6984 41.9066 21.099C41.9066 15.4654 39.6653 10.3461 36.0288 6.5835C33.2146 10.6915 31.5672 15.6615 31.5672 21.0169ZM0.0927734 21.099C0.0927734 26.6984 2.30639 31.7902 5.90403 35.5463C8.75856 31.4198 10.4322 26.4142 10.4322 21.0169C10.4322 15.6615 8.78464 10.6914 5.97056 6.5835C2.33403 10.3461 0.0927734 15.4654 0.0927734 21.099Z" fill="%23B4D99A"/><path d="M33.4894 21.0987C33.4894 16.4134 34.8442 11.9369 37.3664 8.11434C36.5479 7.08453 35.6348 6.13358 34.6391 5.27393C33.511 6.87416 32.5578 8.59074 31.7958 10.3942C30.3613 13.7857 29.634 17.3872 29.634 21.0987C29.634 24.8102 30.3612 28.4117 31.7958 31.8032C32.5579 33.6067 33.5111 35.3234 34.6391 36.9236C35.6348 36.064 36.5479 35.113 37.3665 34.0832C34.8442 30.2606 33.4894 25.784 33.4894 21.0987ZM4.63363 8.11434C7.15584 11.9369 8.51059 16.4135 8.51059 21.0987C8.51059 25.784 7.15576 30.2606 4.63354 34.0832C5.45204 35.113 6.36512 36.064 7.36084 36.9236C8.48889 35.3234 9.44213 33.6067 10.2042 31.8032C11.6387 28.4117 12.3661 24.8102 12.3661 21.0987C12.3661 17.3872 11.6387 13.7857 10.2042 10.3942C9.44217 8.59075 8.48896 6.87417 7.36092 5.27393C6.3652 6.13358 5.45213 7.08453 4.63363 8.11434Z" fill="%23E5E4DF"/></g><defs><clipPath id="clip0_111_816"><rect width="42" height="42" fill="white"/></clipPath></defs></svg>') no-repeat center center;
    background-size: contain;
    cursor: pointer;
  }
</style>

<div class="m-2">
  <%= form_with url: update_pet_dob_onboarding_path(@pet), id: "petDobForm", local: true do |f| %>
    <div class="text-center mb-8">
      <div class="text-yellow-200 text-4xl mt-12">Birthday</div>
      <div class="text-gray-400 text-2xl mt-4">When is <%= @pet.name %>'s birthday?</div>
    </div>
    <input type="hidden" name="dob" id="dob_input">
    <div class="w-full mb-4 mt-24">
      <div class="flex space-x-2 mx-4">
        <div class="flex flex-grow w-1/2 relative">
          <label for="dob_day" class="absolute top-0 left-0 text-red-400 font-bold bg-black p-2 rounded-br-xl">Day</label>
          <%= f.select :dob_day, (1..31).to_a.map { |d| [d, d] }, { prompt: ' ' }, { id: 'dob_day', required: true, class: "bg-red-400 text-white text-4xl rounded-2xl font-bold w-full pt-6 text-center appearance-none" } %>
        </div>
        <div class="space-y-2 w-full">
          <div class="flex flex-grow w-full relative">
            <label for="dob_month" class="absolute top-0 left-0 text-violet-400 font-bold bg-black p-2 rounded-br-xl">Month</label>
            <%= f.select :dob_month, Date::MONTHNAMES.compact.each_with_index.map { |m, i| [m, i + 1] }, { prompt: '' }, { 
              id: 'dob_month', 
              required: true, 
              class: "bg-violet-400 text-white text-3xl rounded-2xl font-bold w-full pt-12 pb-4 text-center appearance-none"
            } %>
          </div>
          <div class="flex flex-grow w-full relative">
            <label for="dob_year" class="absolute top-0 left-0 text-teal-400 font-bold bg-black p-2 rounded-br-xl">Year</label>
            <%= f.select :dob_year, (1900..Date.current.year).to_a.reverse, { prompt: '' }, { 
              id: 'dob_year', 
              required: true, 
              class: "bg-teal-200 text-white text-3xl rounded-2xl font-bold w-full pt-12 pb-4 text-center appearance-none"
            } %>
          </div>
        </div>
      </div>
    </div>
    <div class="slider-container mt-32 px-8">
      <input type="range" min="1" max="100" value="1" class="slider" id="myRange">
      <div class="mt-12 flex space-x-1 mx-12">
        <div class="w-full h-1 bg-yellow-200"></div>
        <div class="w-full h-1 bg-yellow-200"></div>
        <div class="w-full h-1 bg-yellow-200"></div>
        <div class="w-full h-1 bg-yellow-200"></div>
        <div class="w-full h-1 bg-gray-400"></div>
        <div class="w-full h-1 bg-gray-400"></div>
        <div class="w-full h-1 bg-gray-400"></div>
      </div>
    </div>
  <% end %>
</div>

<script>
  const initializeDateOfBirthForm = () => {
    const form = document.querySelector('form'); // Get the form element
    const daySelect = document.getElementById('dob_day');
    const monthSelect = document.getElementById('dob_month');
    const yearSelect = document.getElementById('dob_year');

    if (!form || !daySelect || !monthSelect || !yearSelect) return; // Ensure elements exist

    const updateDays = () => {
      const month = parseInt(monthSelect.value, 10);
      const year = parseInt(yearSelect.value, 10);
      let daysInMonth = 31; // Default to 31 days

      if (month && year) {
        // Determine the number of days in the month
        daysInMonth = new Date(year, month, 0).getDate(); // 0 gets the last day of the previous month
      }

      // Clear existing options
      daySelect.innerHTML = '';

      // Add the prompt option
      const promptOption = document.createElement('option');
      promptOption.value = '';
      promptOption.disabled = true; // Make it unselectable
      promptOption.selected = true; // Set it as the default selected option
      daySelect.appendChild(promptOption);

      // Populate day select with the correct number of days
      for (let day = 1; day <= daysInMonth; day++) {
        const option = document.createElement('option');
        option.value = day;
        option.textContent = day;
        daySelect.appendChild(option);
      }

      // Ensure the day selector is enabled
      daySelect.disabled = false;

      // Reset the day selection if the current selection is no longer valid
      if (parseInt(daySelect.value, 10) > daysInMonth) {
        daySelect.value = ''; // Reset to the prompt option
      }
    };

    // Update days when month or year is changed
    monthSelect.addEventListener('change', updateDays);
    yearSelect.addEventListener('change', updateDays);

    // Initial call to set up the days based on default selections
    updateDays();

    // Update the hidden 'dob' input value before form submission
    form.addEventListener('submit', function (event) {
      const day = daySelect.value;
      const month = monthSelect.value;
      const year = yearSelect.value;

      let dobInput = form.querySelector('input[name="dob"]');

      if (!dobInput) {
        dobInput = document.createElement('input');
        dobInput.type = 'hidden';
        dobInput.name = 'dob'; // Ensure this matches your form field's name
        form.appendChild(dobInput);
      }

      // Set the value in the format YYYY-MM-DD
      if (day && month && year) {
        dobInput.value = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`; // Format: YYYY-MM-DD
      } else {
        dobInput.value = ''; // Clear the value if any are missing
      }
    });

    var slider = document.getElementById("myRange");

    if (slider) {
      slider.oninput = function () {
        // Ensure the dob input is updated before submitting
        const day = daySelect.value;
        const month = monthSelect.value;
        const year = yearSelect.value;

        let dobInput = form.querySelector('input[name="dob"]');

        if (!dobInput) {
          dobInput = document.createElement('input');
          dobInput.type = 'hidden';
          dobInput.name = 'dob'; // Ensure this matches your form field's name
          form.appendChild(dobInput);
        }

        // Set the value in the format YYYY-MM-DD
        if (day && month && year) {
          dobInput.value = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`; // Format: YYYY-MM-DD
        }

        if (this.value == this.max) {
          // Submit the form when the slider reaches the max value
          Turbo.navigator.submitForm(document.querySelector('form'));
        }
      };
    }
  };

  // Attach the initializer to both DOMContentLoaded and Turbo events
  document.addEventListener('DOMContentLoaded', initializeDateOfBirthForm);
  document.addEventListener('turbo:load', initializeDateOfBirthForm);
</script>
