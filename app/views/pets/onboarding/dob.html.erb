<div class="m-2">
  <%= form_with url: update_pet_dob_onboarding_path(@pet), local: true do |f| %>
    <div class="text-center mb-8">
      <div class="text-yellow-200 text-4xl">Birthday</div>
      <div class="text-white text-2xl mt-4">When is <%= @pet.name %>'s birthday?</div>
    </div>
    <div class="w-full mb-4">
      <%= f.label :dob, "Birthday", class: "block text-xl font-semibold mb-2 text-yellow-200" %>
      <div class="flex space-x-2">
        <%= f.select :dob_day, (1..31).to_a, { prompt: 'Day' }, id: 'dob_day', class: "bg-black text-white border-2 border-yellow-200 rounded-2xl text-4xl p-4 font-bold w-full" %>
        <%= f.select :dob_month, Date::MONTHNAMES.compact.each_with_index.map { |m, i| [m, i + 1] }, { prompt: 'Month' }, id: 'dob_month', class: "bg-black text-white border-2 border-yellow-200 rounded-2xl text-4xl p-4 font-bold w-full" %>
        <%= f.select :dob_year, (1900..Date.current.year).to_a.reverse, { prompt: 'Year' }, id: 'dob_year', class: "bg-black text-white border-2 border-yellow-200 rounded-2xl text-4xl p-4 font-bold w-full" %>
      </div>
    </div>
    <%= f.submit "Next!", class: "mt-2 text-white text-4xl underline" %>
  <% end %>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const form = document.querySelector('form'); // Get the form element
    const daySelect = document.getElementById('dob_day');
    const monthSelect = document.getElementById('dob_month');
    const yearSelect = document.getElementById('dob_year');

    const updateDays = () => {
      const month = parseInt(monthSelect.value, 10);
      const year = parseInt(yearSelect.value, 10);
      let daysInMonth = 31; // Default to 31 days

      if (month && year) {
        // Determine the number of days in the month
        daysInMonth = new Date(year, month, 0).getDate(); // 0 gets the last day of the previous month
      }

      // Clear existing options
      daySelect.innerHTML = '';

      // Add the prompt option
      const promptOption = document.createElement('option');
      promptOption.value = '';
      promptOption.textContent = 'Day'; // Placeholder text
      promptOption.disabled = true; // Make it unselectable
      promptOption.selected = true; // Set it as the default selected option
      daySelect.appendChild(promptOption);

      // Populate day select with the correct number of days
      for (let day = 1; day <= daysInMonth; day++) {
        const option = document.createElement('option');
        option.value = day;
        option.textContent = day;
        daySelect.appendChild(option);
      }

      // Ensure the day selector is enabled
      daySelect.disabled = false; 

      // Reset the day selection if the current selection is no longer valid
      if (parseInt(daySelect.value, 10) > daysInMonth) {
        daySelect.value = ''; // Reset to the prompt option
      }
    };


    // Update days when month or year is changed
    monthSelect.addEventListener('change', updateDays);
    yearSelect.addEventListener('change', updateDays);

    // Initial call to set up the days based on default selections
    updateDays();

    form.addEventListener('submit', function(event) {
      const day = daySelect.value;
      const month = monthSelect.value;
      const year = yearSelect.value;

      // Create a hidden input to submit the full date
      let dobInput = form.querySelector('input[name="dob]"]');
      if (!dobInput) {
        dobInput = document.createElement('input');
        dobInput.type = 'hidden';
        dobInput.name = 'dob'; // Ensure this matches your form field's name
        form.appendChild(dobInput);
      }

      // Set the value in the format YYYY-MM-DD
      if (day && month && year) {
        dobInput.value = `${year}-${month.padStart(2, '0')}-${day.padStart(2, '0')}`; // Format: YYYY-MM-DD
      } else {
        dobInput.value = ''; // Clear the value if any are missing
      }
    });
  });
</script>
